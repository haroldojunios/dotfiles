## Set values
# Hide welcome message
set fish_greeting
set -x PAGER "bat --plain"
set -x MANPAGER "sh -c 'col -bx | bat -l man -p'"
set -x MICRO_TRUECOLOR 1
set -U fish_features qmark-noglob

{{ if eq .osid "android" }}
set -x USER haroldo

if not pgrep -f crond >/dev/null && type -q crond
    crond
end

if not pgrep -f sshd >/dev/null && type -q sshd
    sshd
end

{{   if .installDE }}
set -x DISPLAY ":1"
{{   end }}
{{ else }}
if not test -f ~/.cache/weather && type -q get-weather
    get-weather ~/.cache/weather &>/dev/null &
    disown
end
test -f /usr/share/xdg-desktop-portal/portals/kde.portal && set -x GTK_USE_PORTAL 1
{{ end }}


if test "$TERM" = linux
    if type -q yaft
        set -x FRAMEBUFFER /dev/fb0
        # set -x YAFT wall
        yaft
    end
end

## Export variable need for qt-theme
if type -q qtile
    set -x QT_QPA_PLATFORMTHEME qt5ct
end

if status --is-interactive && not functions -q fisher
    curl -sL https://git.io/fisher | source
    if grep -q fisher ~/.config/fish/fish_plugins
        fisher update
    else
        fisher install jorgebucaran/fisher
        fisher install franciscolourenco/done
        fisher install edc/bass
        fisher install Kristoffer-PBS/autols-fish
        fisher install jorgebucaran/nvm.fish
    end
    if type -q autols-toggle
        autols-toggle on &>/dev/null
    end
end

# Set settings for https://github.com/franciscolourenco/done
set -x __done_min_cmd_duration 10000
set -x __done_notification_urgency_level low
set -x __done_notification_urgency_level_failure normal

## Environment setup
# Apply .profile: use this to put fish compatible .profile stuff in
if test -f ~/.fish_profile
    source ~/.fish_profile
end

if test -f ~/.aliases
    source ~/.aliases
end

# Add ~/.local/bin to PATH
if test -d ~/.local/bin
    if not contains -- ~/.local/bin $PATH
        set -p PATH ~/.local/bin
    end
end

## Advanced command-not-found hook
if test -f /usr/share/doc/find-the-command/ftc.fish
    source /usr/share/doc/find-the-command/ftc.fish
end

if test -f ~/.config/rclone/rclone.fish
    source ~/.config/rclone/rclone.fish
end

## Functions
# use bat to color --help messages
function h --argument cmd
    $cmd --help 2>&1 | bat --plain --language=help
end

function fish_user_key_bindings
    # ctrl-del
    bind \e\[3\;5~ kill-word

    # ctrl-] (backspace)
    bind \cH backward-kill-word

    # ctrl-u
    bind \cu kill-whole-line
end

# Functions needed for !! and !$ https://github.com/oh-my-fish/plugin-bang-bang
function __history_previous_command
    switch (commandline -t)
        case "!"
            commandline -t $history[1]
            commandline -f repaint
        case "*"
            commandline -i !
    end
end

function __history_previous_command_arguments
    switch (commandline -t)
        case "!"
            commandline -t ""
            commandline -f history-token-search-backward
        case "*"
            commandline -i '$'
    end
end

if [ "$fish_key_bindings" = fish_vi_key_bindings ]
    bind -Minsert ! __history_previous_command
    bind -Minsert '$' __history_previous_command_arguments
else
    bind ! __history_previous_command
    bind '$' __history_previous_command_arguments
end

# Fish command history
function history
    builtin history --show-time='%F %T '
end

{{ template "shell/colors.fish" . }}

{{ if .isWSL }}
if service --status-all 2>/dev/null | grep docker | grep - &>/dev/null
    sudo service docker start &>/dev/null
end
{{ end }}

## Run fastfetch if session is interactive
if status --is-interactive && test -z "$VSCODE" && test -z "$TMUX"
    if type -q fastfetch
        fastfetch --load-config neofetch
    else if type -q neofetch
        neofetch
    else if type -q wslfetch
        wslfetch
    end
end

type -q nvim && set -x EDITOR nvim || set -x EDITOR vim

if test -f ~/.config/.env
    while read -la line
        set -x $(string split -m1 '=' "$line")
    end <~/.config/.env
end

if test -f ~/.config/.env.local
    while read -la line
        set -x $(string split -m1 '=' "$line")
    end <~/.config/.env.local
end

## nvm
if status --is-interactive && type -q nvm
    if nvm list lts &>/dev/null
        nvm use lts &>/dev/null
    else
        nvm install lts &>/dev/null
    end
end

## Mcfly history
if status --is-interactive && type -q mcfly
    mcfly init fish | source
end

## zoxide
if status --is-interactive && type -q zoxide
    zoxide init fish | source
end

## pyenv
if status --is-interactive && type -q pyenv
    set -x PYENV_ROOT $HOME/.pyenv
    set fish_user_paths $PYENV_ROOT/bin $fish_user_paths
    pyenv init - | source
end

# stderred
if test -f /usr/lib/libstderred.so
    set -x LD_PRELOAD /usr/lib/libstderred.so
end

## Starship prompt
{{- if eq .osid "windows" }}
if type -q starship
    starship init fish | source
end
{{- else }}
if status --is-interactive && type -q starship
    starship init fish | source
end
{{- end }}
